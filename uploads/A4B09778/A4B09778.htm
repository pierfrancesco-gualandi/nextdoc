<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modello 3D di Esempio</title>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }
        #container {
            width: 100%;
            height: 100%;
            background-color: #f0f0f0;
            position: relative;
        }
    </style>
    <!-- I file CSS saranno caricati dinamicamente quando riceveremo le informazioni sulla cartella -->
</head>
<body>
    <div id="container">
        <!-- L'interfaccia sarà generata dinamicamente dal JavaScript -->
    </div>
    
    <script>
        // Informazioni per il debug
        console.log('Modello 3D - HTML principale caricato');
        
        // Crea un elemento di debug temporaneo
        const debugElement = document.createElement('div');
        debugElement.style.cssText = `
            position: absolute;
            bottom: 10px;
            left: 10px;
            right: 10px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px;
            font-family: monospace;
            font-size: 12px;
            z-index: 100;
            max-height: 150px;
            overflow-y: auto;
        `;
        document.getElementById('container').appendChild(debugElement);
        
        function logDebug(message) {
            console.log(message);
            debugElement.innerHTML += `<div>${message}</div>`;
        }
        
        // Registra un gestore per i messaggi dal parent frame
        window.addEventListener('message', function(event) {
            logDebug(`Ricevuto messaggio dal parent: ${event.data.type}`);
            
            if (event.data && event.data.type === 'model-folder-info') {
                const folderInfo = event.data;
                
                logDebug(`Ricevute informazioni cartella con ${folderInfo.allFiles?.length || 0} file`);
                
                // Cerca il file CSS nella mappa dei file
                if (folderInfo.fileMap) {
                    const cssUrl = folderInfo.fileMap['res/style.css'] || 
                                   folderInfo.fileMap['style.css'];
                    
                    if (cssUrl) {
                        logDebug(`Caricamento CSS da: ${cssUrl}`);
                        
                        // Crea un link per il CSS
                        const linkElement = document.createElement('link');
                        linkElement.rel = 'stylesheet';
                        linkElement.href = cssUrl;
                        document.head.appendChild(linkElement);
                    }
                    
                    // Cerca il file JS nella mappa dei file
                    const jsUrl = folderInfo.fileMap['res/script.js'] || 
                                  folderInfo.fileMap['script.js'];
                    
                    if (jsUrl) {
                        logDebug(`Caricamento JS da: ${jsUrl}`);
                        
                        // Crea uno script tag per il JS
                        const scriptElement = document.createElement('script');
                        scriptElement.src = jsUrl;
                        document.body.appendChild(scriptElement);
                    } else {
                        logDebug('File JavaScript non trovato nella mappa dei file');
                        // Carica un JS di fallback
                        loadFallbackScript();
                    }
                } else {
                    logDebug('Nessuna mappa dei file ricevuta nel messaggio');
                    loadFallbackScript();
                }
            }
        });
        
        // Funzione per caricare uno script di fallback se non troviamo il file JS esterno
        function loadFallbackScript() {
            logDebug('Caricamento script di fallback...');
            
            // Crea un canvas predefinito
            const canvas = document.createElement('canvas');
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            document.getElementById('container').appendChild(canvas);
            
            const ctx = canvas.getContext('2d');
            let angle = 0;
            
            // Animazione di fallback
            function animate() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                // Centro e dimensione
                const centerX = canvas.width / 2;
                const centerY = canvas.height / 2;
                const size = 100;
                
                // Disegna un cubo rotante semplice
                ctx.save();
                ctx.translate(centerX, centerY);
                ctx.rotate(angle);
                
                // Cubo
                ctx.fillStyle = 'rgba(255, 0, 0, 0.7)';
                ctx.fillRect(-size/2, -size/2, size, size);
                
                // Bordo
                ctx.strokeStyle = 'white';
                ctx.lineWidth = 2;
                ctx.strokeRect(-size/2, -size/2, size, size);
                
                ctx.restore();
                
                // Testo di debug
                ctx.fillStyle = 'white';
                ctx.font = '14px Arial';
                ctx.fillText('FALLBACK - Script esterno non trovato', 20, 30);
                
                // Aggiorna angolo
                angle += 0.01;
                requestAnimationFrame(animate);
            }
            
            // Avvia animazione
            animate();
        }
        
        // Funzione per richiedere le informazioni sulla cartella
        function requestFolderInfo() {
            logDebug('Richiesta informazioni cartella al parent frame...');
            
            try {
                window.parent.postMessage({
                    type: 'request-model-folder-info'
                }, '*');
            } catch (error) {
                logDebug(`Errore nell'invio del messaggio: ${error.message}`);
                // Se non riusciamo a comunicare, carica il fallback
                setTimeout(loadFallbackScript, 1000);
            }
        }
        
        // Richiedi informazioni quando il documento è pronto
        document.addEventListener('DOMContentLoaded', function() {
            logDebug('DOM caricato, richiedo informazioni cartella...');
            requestFolderInfo();
            
            // Se dopo 3 secondi non abbiamo ricevuto risposta, carica il fallback
            setTimeout(function() {
                if (!document.querySelector('script[src*="script.js"]')) {
                    logDebug('Timeout - nessuna risposta dal parent');
                    loadFallbackScript();
                }
            }, 3000);
        });
        
        // Se il documento è già pronto, richiedi subito
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            logDebug('Documento già pronto, richiedo informazioni cartella immediatamente...');
            requestFolderInfo();
        }
    </script>
</body>
</html>